import type { Handle } from '@sveltejs/kit';
import chalk from 'chalk';
import dedent from 'dedent';
import { building } from '$app/environment';
import { lucia } from '$lib/server/auth';
import { log } from '$lib/server/utils';
import config from '~shared/config';

if (!building) {
	const glob = new Bun.Glob('*/{cover,thumbnail}');
	const { done } = glob.scanSync({ cwd: config.directories.images, onlyFiles: false }).next();

	if (!done) {
		console.log(
			chalk.cyan(
				dedent(`
					${chalk.yellow.bold(`IMPORTANT UPDATE!`)}
					Generated images are now stored in a folder with its name generated by hashing the encoder properties.
					This change was made to facilitate changing preset encoding options without needing to delete old generated images.
					You have generated images stored with the old naming format.
					Run the ${chalk.bold('migrate:preset-hash')} command to migrate these to the new naming format.`)
			)
		);
	}
}

export const handle: Handle = async ({ event, resolve }) => {
	const start = performance.now();
	const sessionId = event.cookies.get(lucia().sessionCookieName);

	if (!sessionId) {
		event.locals.user = null;
		event.locals.session = null;
	} else {
		const { session, user } = await lucia().validateSession(sessionId);

		if (session && session.fresh) {
			const sessionCookie = lucia().createSessionCookie(session.id);
			event.cookies.set(sessionCookie.name, sessionCookie.value, {
				path: '.',
				...sessionCookie.attributes,
				secure: config.site.secureSessionCookie,
			});
		}

		if (!session) {
			const sessionCookie = lucia().createBlankSessionCookie();
			event.cookies.set(sessionCookie.name, sessionCookie.value, {
				path: '.',
				...sessionCookie.attributes,
				secure: config.site.secureSessionCookie,
			});
		}

		event.locals.user = user;
		event.locals.session = session;
	}

	const response = await resolve(event);

	const color = (() => {
		const status = response.status;

		if (status >= 200 && status <= 299) {
			return chalk.green;
		} else if (status >= 300 && status <= 499) {
			return chalk.yellow;
		} else if (status >= 500 && status <= 599) {
			return chalk.red;
		} else {
			return chalk.reset;
		}
	})();

	log(
		`${color.bold(event.request.method)} ${color(`(${response.status})`)} - ${chalk.blue(chalk.bold(event.url.pathname) + event.url.search)} - ${chalk.bold(`${(performance.now() - start).toFixed(2)}ms`)}`
	);

	return response;
};
